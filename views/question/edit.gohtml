{[/* layout: basic */]}

{[define "title"]}提问{[end]}

{[define "appBar"]}
    <mu-button flat slot="right" @click="onSubmit">提交</mu-button>
{[end]}

{[define "body"]}
<mu-form ref="form" :model="question">
    <mu-form-item prop="content" :rules="contentRules">
        <mu-text-field multi-line :rows="10" v-model="question.content" placeholder="请在这里输入问题"></mu-text-field>
    </mu-form-item>

    <mu-form-item>
        <mu-switch :disabled="question.replier" v-model="question.urgent" label="我很着急，恳请尽快回复"></mu-switch>
        <mu-switch :disabled="question.asker != {[.user.ID]}" v-model="question.private" label="涉及隐私，请勿公开展示"></mu-switch>
    </mu-form-item>
</mu-form>
{[end]}


{[define "script"]}
<script>
let vm = new Vue(lotus.buildVueConfig({
    el: 'div#app',

    data: {
        contentRules: [
            { validate: (val) => val.trim().length >= 10, message: '问题不能短于10个字符。'},
        ],
        question: {
            id: 0,
            asker: {[.user.ID]},
            replier: 0,
            urgent: false,
            private: false,
            content: '',
        },
    },

    methods: {
        init(id) {
            lotus.callApi('get-question-by-id', {id: id})
                .then(res => {
                    if(res.replier) {
                        res.urgent = false;
                    }
                    this.question = res;
                })
                .catch(err => this.$alert(err.message));
        },

        onSubmit() {
            this.$refs.form.validate()
                .then(res => res && lotus.callApi('edit-question', this.question))
                .then(res => res && this.$alert('提交成功，点击“确定”按钮返回问题列表。'))
                .then(res => res && (location.href = '/question/mine.html'))
                .catch(err => this.$alert(err.message));
        },
    },
}));

(function() {
    let id = lotus.getUrlArgs().id;
    id && vm.init(id);
})();
</script>
{[end]}
