{[/* layout: basic */]}

{[define "title"]}{[.title]}{[end]}

{[define "style"]}
<style>
.mu-radio-label {
    font-size: 12px;
    line-height: 12px;
    white-space: initial;
}
</style>
{[end]}

{[define "appBar"]}
<mu-menu slot="right" :open.sync="filterMenu.visible">
    <mu-row slot="content" wrap="wrap" style="padding:16px">
        <mu-col span="6" @click="onFilterMenuSelected(0)">
            <mu-radio :value="0" :input-value="filterMenu.tag" label="全部"></mu-radio>
        </mu-col>
        <mu-col v-for="t in tags" :key="t.id" span="6" @click="onFilterMenuSelected(t.id)">
            <mu-radio :value="t.id" :input-value="filterMenu.tag" uncheck-icon="bookmark_border" checked-icon="bookmark" :color="t.color" :label="t.name"></mu-radio>
        </mu-col>
    </mu-row>
    <mu-button small flat color="primary" style="height:100%;">{{filterMenu.tag ? tags[filterMenu.tag].name : '全部'}}<mu-icon right value="search"></mu-icon></mu-button>
</mu-menu>
{[end]}

{[define "body"]}
<mu-paper v-for="q in questions" :key="q.id" :z-depth="5" style="padding: 5px; margin: 5px;">
    <mu-row>
        <mu-col span="1"><mu-avatar :size="24"><a :href="'/user/index.html?id='+q.asker"><img :src="q.askerAvatar"></a></mu-avatar></mu-col>
        <mu-col span="6" align-self="center"><a :href="'/question/list.html?asker='+q.asker">{{q.askerName}}</a></mu-col>
        <mu-col span="5" style="text-align:right">
            <mu-icon value="error" :color="q.urgent ? 'red' : 'grey'" @click="onToggleUrgent(q)"></mu-icon>
            <mu-icon value="lock" :color="q.private ? 'purple' : 'grey'" @click="onTogglePrivate(q)"></mu-icon>
            <mu-icon value="grade" :color="q.featured ? 'orange' : 'grey'" @click="onToggleFeatured(q)"></mu-icon>
        </mu-col>
    </mu-row>

    <mu-row>
        <mu-col span="10"><div class="question-bubble">{{q.content}}</div></mu-col>
        <mu-col span="2" align-self="center" style="text-align:center;font-size:9px;">{{q.askedAt.substring(0,16).replace('T', ' ')}}</mu-col>
    </mu-row>

    <mu-row v-if="q.replier">
        <mu-col span="2" align-self="center" style="text-align:center;font-size:9px;">{{q.repliedAt.substring(0,16).replace('T', ' ')}}</mu-col>
        <mu-col span="10"><div class="reply-bubble">{{q.reply}}</div></mu-col></mu-row>
    </mu-row>

    <mu-row>
        <mu-col span="6">
            <mu-button small flat style="min-width:initial" @click="onEditQuestion(q)" {[- if IsManager .user.Role | not]} v-if="q.asker=={[.user.ID]} && !q.replier" {[- end]}>
                <mu-icon value="edit" color="primary"></mu-icon>
            </mu-button>
{[if IsManager .user.Role]}
            <mu-button small flat style="min-width:initial" @click="onReplyQuestion(q)">
                <mu-icon value="reply" color="primary"></mu-icon>
            </mu-button>
            <mu-button small flat style="min-width:initial" @click="onShowTagDialog(q)">
                <mu-icon value="bookmark_border" color="primary"></mu-icon>
            </mu-button>
{[end]}
            <mu-button small flat style="min-width:initial" @click="onRemoveQuestion(q)" {[- if IsManager .user.Role | not]} v-if="q.asker=={[.user.ID]} && !q.replier" {[- end]}>
                <mu-icon value="delete" color="primary"></mu-icon>
            </mu-button>
        </mu-col>
        <template v-if="q.replier">
            <mu-col style="text-align:right" span="5" align-self="center"><a :href="'/question/list.html?replier='+q.replier">{{q.replierName}}</a></mu-col>
            <mu-col style="text-align:right" span="1"><mu-avatar :size="24"><a :href="'/user/index.html?id='+q.replier"><img :src="q.replierAvatar"></a></mu-avatar></mu-col>
        </template>
    </mu-row>

    <template v-if="q.tags.length">
        <mu-divider></mu-divider>
        <mu-row>
            <mu-button small flat v-for="t in q.tags" :key="t.id" style="min-width:initial">
                <mu-icon left value="bookmark" :color="t.color"></mu-icon>
                {{t.name}}
            </mu-button>
        </mu-row>
    </template>
</mu-paper>

<mu-flex justify-content="center">
    <mu-pagination raised v-if="pagination.total > pagination.size" @change="onPageChange" :total="pagination.total" :current.sync="pagination.current" :page-size="pagination.size"></mu-pagination>
</mu-flex>

<mu-dialog :open.sync="tagDialog.visible">
    <mu-row id="tag-dialog-wrapper" style="font-size:12px;">
        <mu-col v-for="t in tags" :key="t.id" span="6">
            <mu-checkbox style="line-height:12px;" :value="t.selected" v-model="t.selected" uncheck-icon="bookmark_border" checked-icon="bookmark" :color="t.color" :label="t.name"></mu-checkbox>
        </mu-col>
    </mu-row>
    <mu-button slot="actions" flat color="primary" @click="onCloseTagDialog">确定</mu-button>
</mu-dialog>

{[end]}

{[define "script"]}
<script>
var vm = new Vue(lotus.buildVueConfig({
    el: 'div#app',

    data: {
        filterMenu: {
            tag: 0,
            visible: false,
        },

        tagDialog: {
            tags: [],
            question: null,
            visible: false,
        },

        pagination: {
            total: 1,
            current: 1,
            size: 10,
        },

        tags: {},
        questions: [],
    },

    methods: {
        init() {
            lotus.callApi('list-tags')
                .then(res => {
                    let tags = {}
                    res = res || [];
                    for(let t of res) {
                        t.selected = false;
                        tags[String(t.id)] = t;
                    }
                    this.tags = tags;
                    this.tagDialog.tags = res;
                }).catch(err => console.log(err.message));
        },

        refresh() {
            let args = {
                tag: this.filterMenu.tag,
                pageSize: this.pagination.size,
                pageNumber: this.pagination.current - 1,
            };

            lotus.callApi('find-question', args)
                .then(res => {
                    let questions = res.questions || [];
                    for(let q of questions) {
                        let tags = [];
                        if(q.tags) {
                            for(let tid of q.tags) {
                                let t = this.tags[String(tid)];
                                t && tags.push(t);
                            }
                        }
                        q.tags = tags;
                    }
                    this.questions = questions;
                    this.pagination.total = res.total;
                    this.pagination.current = res.pageNumber + 1;
                }).catch(err => {
                    this.$alert(err.message);
                });
        },

        onPageChange() {
            this.refresh()
        },

        onEditQuestion(q) {
            location.href = '/question/edit.html?id=' + q.id;
        },

        onReplyQuestion(q) {
            location.href = '/question/reply.html?id=' + q.id;
        },

        onRemoveQuestion(q) {
            let qs = this.questions;
            this.$confirm('确实要删除这个问题吗？')
                .then(data => {
                    if (data.result) {
                        return lotus.callApi('remove-question', {id: q.id})
                    }
                    return false;
                }).then(result => {
                    if(result !== false) {
                        qs.splice(qs.indexOf(q), 1);
                    }
                }).catch(err => {
                    this.$alert(err.message);
                });
        },

        onFilterMenuSelected(tag) {
            this.filterMenu.visible = false;
            if(this.filterMenu.tag != tag) {
                this.filterMenu.tag = tag;
                this.refresh()
            }
        },

        onShowTagDialog(q) {
            this.tagDialog.question = q;
            for(let k in this.tags) {
                this.tags[k].selected = false;
            }
            for(let t of q.tags) {
                this.tags[String(t.id)].selected = true;
            }
            this.tagDialog.visible = true;
            Vue.nextTick(() => {
                document.getElementById("tag-dialog-wrapper").parentNode.style.padding = "12px";
            });
        },

        onCloseTagDialog() {
            let q = this.tagDialog.question;
            let tags = [], removed = [], added = [];

            for(let k in this.tags) {
                let t = this.tags[k];
                if(t.selected) {
                    tags.push(t);
                    let found = false;
                    for(let t1 of q.tags) {
                        if(t1.id == t.id) {
                            found = true;
                            break;
                        }
                    }
                    if(!found) {
                        added.push(t.id);
                    }
                } else {
                    for(let t1 of q.tags) {
                        if(t1.id == t.id) {
                            removed.push(t.id)
                        }
                    }
                }
            }

            this.tagDialog.visible = false;
            if(!removed.length && !added.length) {
                return;
            }

            lotus.callApi('set-question-tag', {id: q.id, added: added, removed: removed})
                .then(_ => q.tags = tags)
                .catch(err => this.$alert(err.message))
        },

        onToggleUrgent(q) {
            if(q.replier > 0) {
                this.$toast.info('不能给已回复的问题设置"加急"标志');
                return;
            }
{[if IsGeneralUser .user.Role]}
            if(q.asker !== {[.user.ID]}) {
                this.$toast.info('权限不足');
                return;
            }
{[end]}
            let urgent = !q.urgent;
            lotus.callApi('set-question-flag', {id: q.id, flag: 'urgent', value: urgent})
                .then(_ => q.urgent = urgent)
                .catch(err => this.$alert(err.message));
        },

        onTogglePrivate(q) {
            if(q.asker !== {[.user.ID]}) {
                this.$toast.info('只有提问人才能设置“隐私”标志');
                return;
            }
            let private = !q.private;
            lotus.callApi('set-question-flag', {id: q.id, flag: 'private', value: private})
                .then(_ => q.private = private)
                .catch(err => this.$alert(err.message));
        },

        onToggleFeatured(q) {
{[if IsManager .user.Role]}
            if(!q.replier) {
                this.$toast.info('不能给未回复的问题设置"精华"标志');
                return;
            }
            let featured = !q.featured;
            lotus.callApi('set-question-flag', {id: q.id, flag: 'featured', value: featured})
                .then(_ => q.featured = featured)
                .catch(err => this.$alert(err.message));
{[else]}
            this.$toast.info('权限不足');
{[end]}
        },
    },
}));

vm.init();
vm.refresh();
</script>
{[end]}
