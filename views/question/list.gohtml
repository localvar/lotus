{[/* layout: basic */]}

{[define "title"]}问题列表{[end]}

{[define "appBar"]}
    <div slot="right">
        <mu-button icon @click="onShowFilterDialog"><mu-icon value="search"></mu-icon></mu-button>
    </div>
{[end]}

{[define "body"]}
<mu-paper v-for="q in questions" :key="q.id" :z-depth="5" style="padding: 5px; margin: 5px;">
    <mu-row>
        <mu-col span="1"><mu-avatar :size="24"><a :href="'/user/index.html?id='+q.asker"><img :src="q.askerAvatar"></a></mu-avatar></mu-col>
        <mu-col span="7" align-self="center"><a :href="'/question/list.html?asker='+q.asker">{{q.askerName}}</a></mu-col>
        <mu-col span="4" style="text-align:right">
            <mu-icon value="error" :color="q.urgent ? 'red' : 'grey'" @click="onToggleUrgent(q)"></mu-icon>
            <mu-icon value="lock" :color="q.private ? 'purple' : 'grey'" @click="onTogglePrivate(q)"></mu-icon>
            <mu-icon value="grade" :color="q.featured ? 'orange' : 'grey'" @click="onToggleFeatured(q)"></mu-icon>
        </mu-col>
    </mu-row>
    <mu-row>
        <mu-col span="10"><div class="question-bubble">{{q.content}}</div></mu-col>
        <mu-col span="2" align-self="center" style="text-align:center;font-size:9px;">{{q.askedAt.substring(0,16).replace('T', ' ')}}</mu-col>
    </mu-row>
    <template v-if="q.replier>0">
        <mu-row>
            <mu-col span="2" align-self="center" style="text-align:center;font-size:9px;">{{q.repliedAt.substring(0,16).replace('T', ' ')}}</mu-col>
            <mu-col span="10"><div class="reply-bubble">{{q.reply}}</div></mu-col></mu-row>
        </mu-row>
        <mu-row style="text-align:right">
            <mu-col offset="4" span="7" align-self="center"><a :href="'/question/list.html?replier='+q.replier">{{q.replierName}}</a></mu-col>
            <mu-col span="1"><mu-avatar :size="24"><a :href="'/user/index.html?id='+q.replier"><img :src="q.replierAvatar"></a></mu-avatar></mu-col>
        </mu-row>
    </template>
    <mu-divider></mu-divider>
    <mu-row>
        <mu-button small flat>删除</mu-button>
        <mu-button small flat>修改</mu-button>
        <mu-button small flat>回答</mu-button>
        <mu-button small flat>标签</mu-button>
    </mu-row>
</mu-paper>

<mu-flex justify-content="center">
    <mu-pagination raised v-if="pagination.total > pagination.size" @change="onPageChange" :total="pagination.total" :current.sync="pagination.current" :page-size="pagination.size"></mu-pagination>
</mu-flex>

<mu-dialog :open.sync="filterDialog.visible" title="设置问题过滤条件">
    <mu-select label="标签" v-model="filterDialog.tag" full-width>
        <mu-option :value="0" label="全部">
          <mu-list-item-action avatar>
            <mu-avatar :size="20" color="#FFFF"></mu-avatar>
          </mu-list-item-action>
          <mu-list-item-content>
            <mu-list-item-title>全部</mu-list-item-title>
          </mu-list-item-content>
        </mu-option>
        <mu-option v-for="t in tags" :key="t.id" :value="t.id" :label="t.name">
          <mu-list-item-action avatar>
            <mu-avatar :size="20" :color="t.color"></mu-avatar>
          </mu-list-item-action>
          <mu-list-item-content>
            <mu-list-item-title>{{t.name}}</mu-list-item-title>
          </mu-list-item-content>
        </mu-option>
    </mu-select>
    <mu-button slot="actions" flat color="primary" @click="onCloseFilterDialog">确定</mu-button>
</mu-dialog>
{[end]}

{[define "script"]}
<script>
var vm = new Vue(lotus.buildVueConfig({
    el: 'div#app',

    data: {
        filterDialog: {
            tag: 0,
            urgent: false,
            featured: false,
            visible: false,
        },

        pagination: {
            total: 1,
            current: 1,
            size: 10,
        },

        tags: [],
        questions: [],
    },

    methods: {
        init() {
            lotus.callApi('list-tags')
                .then(res => this.tags = res)
                .catch(err => console.log(err.message));
        },

        refresh() {
            let args = {
                pageSize: this.pagination.size,
                pageNumber: this.pagination.current - 1,
            };

            lotus.callApi('find-question', args)
                .then(res => {
                    this.questions = res.questions;
                    this.pagination.total = res.total;
                    this.pagination.current = res.pageNumber + 1;
                }).catch(err => {
                    this.$alert(err.message);
                });
        },

        onPageChange() {
            this.refresh()
        },

        onShowFilterDialog() {
            this.filterDialog.visible = true;
        },

        onCloseFilterDialog() {
            this.filterDialog.visible = false;
        },

        onToggleUrgent(q) {
            if(q.replier > 0{[if IsGeneralUser .user.Role]} || q.asker !== {[.user.ID]}{[end]}) {
                return;
            }

            let urgent = !q.urgent;
            lotus.callApi('set-question-flag', {id: q.id, flag: 'urgent', value: urgent})
                .then(_ => q.urgent = urgent)
                .catch(err => this.$alert(err.message));
        },

        onTogglePrivate(q) {
            if(q.asker !== {[.user.ID]}) {
                return;
            }
            let private = !q.private;
            lotus.callApi('set-question-flag', {id: q.id, flag: 'private', value: private})
                .then(_ => q.private = private)
                .catch(err => this.$alert(err.message));
        },

        onToggleFeatured(q) {
{[if IsManager .user.Role]}
            if(!q.replier) {
                return;
            }
            let featured = !q.featured;
            lotus.callApi('set-question-flag', {id: q.id, flag: 'featured', value: featured})
                .then(_ => q.featured = featured)
                .catch(err => this.$alert(err.message));
{[end]}
        },
    },
}));

vm.init();
vm.refresh();
</script>
{[end]}
