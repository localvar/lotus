{[/* layout: basic */]}

{[define "title"]}标签管理{[end]}

{[define "body"]}
<mu-list>
    <mu-list-item v-for="tag in tags" :key="tag.id" :ripple="false">
        <mu-list-item-action @click="onChangeTagColor(tag)">
            <mu-icon value="palette" :color="tag.color"></mu-icon>
        </mu-list-item-action>
        <mu-list-item-title><a href="'/question/list.html?tag='+tag.id">{{tag.name}}</a></mu-list-item-title>
        <mu-list-item-action @click="onDeleteTag(tag)">
            <mu-icon value="remove_circle" color="red"></mu-icon>
        </mu-list-item-action>
    </mu-list-item>
    <mu-list-item>
        <mu-list-item-action @click="onSetNewTagColor">
            <mu-icon value="palette" :color="newTag.color"></mu-icon>
        </mu-list-item-action>
        <mu-list-item-title>
            <mu-text-field max-length="10" placeholder="请输入标签名称" v-model="newTag.name"></mu-text-field>
        </mu-list-item-title>
        <mu-list-item-action @click="onAddTag">
            <mu-icon value="add_circle" color="green"></mu-icon>
        </mu-list-item-action>
    </mu-list-item>
</mu-list>

<div style="text-align:center; font-size:12px; font-weight:400;">
<p>标签名称最长10个字符，添加后不可修改。<br>
点击标签名称左侧的调色板图标，可以设置标签颜色。</p>
</div>

<mu-dialog :open.sync="colorDialog.visible">
    <div id="color-picker-wrapper"> <sketch-picker v-model="colorDialog.color" /> </div>
    <mu-button slot="actions" flat color="primary" @click="onCloseColorDialog">确定</mu-button>
</mu-dialog>
{[end]}

{[define "script"]}
<script src="//cdn.bootcss.com/vue-color/2.4.6/vue-color{[if .debug]}.min{[end]}.js"></script>
<script>
let vm = new Vue(lotus.buildVueConfig({
    el: 'div#app',
    components: {
        'sketch-picker': VueColor.Sketch,
    },
    data: {
        colorDialog: {
            visible: false,
            color: {hex: 'grey'}
        },
        newTag: {
            name: '',
            color: 'grey'
        },
        currentTag: null,
        tags: [],
    },

    methods: {
        init() {
            lotus.callApi('list-tags')
                .then(res => {
                    this.tags = res;
                }).catch(err => {
                   console.log(err.message);
                });
        },

        onDeleteTag(tag) {
            this.$confirm('确实要删除标签"'+tag.name+'"吗？标签与问题的关联关系将被同时删除。')
                .then(data => {
                    if(data.result) {
                        return lotus.callApi('delete-tag', {id: tag.id});
                    }
                    return false;
                }).then(result => {
                    if(result !== false) {
                        this.tags.splice(this.tags.indexOf(tag), 1);
                    }
                }).catch(err => {
                    this.$alert(err.message);
                });
        },

        onCloseColorDialog() {
            this.colorDialog.visible = false;
            if(!this.currentTag) {
                this.newTag.color = this.colorDialog.color.hex;
                return;
            }

            let tag = this.currentTag;
            let color = this.colorDialog.color.hex;
            lotus.callApi('update-tag', {id: tag.id, name: tag.name, color: color})
                .then(_ => {
                    this.currentTag.color = color;
                }).catch(err => {
                    this.$alert(err.message);
                });
        },

        showColorDialog(color) {
            this.colorDialog.color = {hex: color};
            this.colorDialog.visible = true;
            Vue.nextTick(() => {
                document.getElementById("color-picker-wrapper").parentNode.style.padding = 0;
            });
        },

        onChangeTagColor(tag) {
            this.currentTag = tag;
            this.showColorDialog(tag.color);
        },

        onSetNewTagColor() {
            this.currentTag = null;
            this.showColorDialog(this.newTag.color);
        },

        onAddTag() {
            let name = this.newTag.name.trim();
            if(name.length == 0) {
                return;
            }
            this.newTag.name = '';
            lotus.callApi('add-tag', {name: name, color: this.newTag.color})
                .then(res => {
                    this.tags.push(res);
                    this.newTag.color = 'grey';
                }).catch(err => {
                    this.$alert(err.message);
                    this.newTag.name = name;
                });
        }
    },
}));

vm.init();
</script>
{[end]}
